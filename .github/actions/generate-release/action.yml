name: 'Generate Release'
description: 'Generates all release artifacts and publishes the client packages to a NuGet feed'
inputs:
  name:
    description: 'The root namespace for generated packages'
    required: true
  prerelease:
    description: 'When set to true, creates a draft release and appends a prerelease suffix to package versions'
    required: true
  version:
    description: 'The semantic version of this release in the format x.y.z where x, y, and z are integers'
    required: true
  source:
    description: 'The NuGet package source to use when pushing generated packages'
    required: true
  key:
    description: 'The NuGet API to use when pushing generated packages'
    required: true
  suffix:
    description: 'The suffix to append to the package versions if this is a prerelease version'
    required: false
    default: ''
  configuration:
    description: 'The build configuration (Debug or Release) to use when building the solution'
    required: true
    default: 'Release'
  output:
    description: 'The base directory to use for all generated artifacts'
    required: true
    default: 'output'

runs:
  using: "composite"
  steps:
    - id: dotnet-restore
      name: 'Restore NuGet dependencies for solution'
      run: dotnet restore $arguments
      shell: bash
      env:
        arguments: '--use-lock-file --packages ~/.nuget/packages'
        NUGET_KEY: ${{ inputs.Key }}
        
    - id: dotnet-build
      name: 'Build solution'
      run: dotnet build $arguments
      shell: bash
      env:
        arguments: ${{ format('-c {0} --no-restore', inputs.configuration) }}
        
    - id: dotnet-test
      name: 'Test solution'
      shell: bash
      run: dotnet test $arguments
      env:
        arguments: ${{ format('-c {0} --no-build --verbosity normal', inputs.configuration) }}
        
    - id: dotnet-run
      name: 'Run code generators'
      run: dotnet run $arguments --project $project ${{ inputs.output }}
      shell: bash
      env:
        project: ${{ format('{0}.Generator', inputs.name) }}
        arguments: ${{ format('-c {0} --no-build', inputs.configuration) }}
        
    - id: dotnet-pack
      name: 'Generate core NuGet package'
      run: dotnet pack $project $arguments -p:PackageVersion=$release
      shell: bash
      env:
        project: ${{ inputs.name }}
        release: ${{ format('{0}{1}', inputs.version, inputs.suffix) }}
        arguments: ${{ format('-c {0} -o {1} --no-build', inputs.configuration, inputs.output) }}
        
    - id: dotnet-nuget-push
      name: 'Push core NuGet package'
      run: dotnet nuget push $package $arguments
      shell: bash
      env:
        package: ${{ format('{0}/{1}.{2}{3}.nupkg', inputs.output, inputs.name, inputs.version, inputs.suffix) }}
        arguments: ${{ format('--source {0} --api-key {1}', inputs.source, inputs.key) }}
        
